二维数组  int a[4][5] =	{ {1,2,3,4,5},
						{6,7,8,9,10},
						{11,12,13,14,15},
						{16,17,18,19,20} };

数组指针（也称行指针）全称：指向数组的指针
int (*p)[n]    ()优先级高，首先说明p是一个指针，指向一个整型的一维数组，这个一维数组的长度是n，也可以说是p的步长。也就是说执行p+1时，p要跨过n个整型数据的长度

int (*p)[5]; //该语句是定义一个数组指针，指向含5个元素的一维数组。
 p=a;        //将该二维数组的首地址赋给p，也就是a[0]或&a[0][0]的地址。
 p++;        //该语句执行过后，也就是p=p+1;p跨过行a[0][]指向了行a[1][]



指针数组全称：储存指针的数组
int *p[n]    []优先级高，先与p结合成为一个数组，再由int*说明这是一个整型指针数组，它有n个指针类型的数组元素。这里执行p+1时，则p指向下一个数组元素，
    
int *p[4];
这样赋值是错误的：p=a；因为p是个不可知的表示，只存在p[0]、p[1]、p[2]...p[n-1],而且它们分别是指针变量可以用来存放变量地址。但可以这样 *p=a; 这里*p表示指针数组第一个元素的值，a的首地址的值。
