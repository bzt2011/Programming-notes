c语言类型（32位系统）
{
    char      8位
    short     16位
    int       32位
    long      32位
    long long 64位

    float  浮点  32位
    double 浮点  64位
}

转换说明及其打印输出结果
{
    %f   浮点数，十进制计数法
    %.3f 指定3个小数点的小数



}

常用的指针类型： 
void *p;              //万能指针，用来暂时保存地址，待用户知道数据的类型以后再转换成对应的数据 
char *p;              //字符指针  指向一个字符串  或 指向一个字符的地址
int  *p;              //整形指针，指向一个整形数组 或 指向一个整形的地址 
char **p;             //二级指针， 用来保存指针的地址的。 
int  *a[10];          //数组指针（因为[]符号的优先级比较高）     该数组中存放了10个 int *的指针
int  (*a)[10];        //指针数组（因为（）符号的优先级比较高） 该指针指向一个 int  [10]的数据类型 
int  *a(int argv)     //函数  该函数的返回类型为 int *的地址  参数为 int 
int  *(*a)(int argv)  //指针  指向返回类型为 int *的地址  参数为 int 的函数

----------------------------------------------------------------------------------------------------
二级指针：存指针的地址

int a=10;  

//p一级指针 
int *p = &a;  
			
//保存p的地址 
int **q = &p;  

*q  -> 取到的是 a的地址   &a 
**q -> 取到的是 a的值   10
-----------------------------------------------------------------------------------------------------
二维指针： 指向一个二维数组的指针  （数组指针）

int a[3][3]={1,2,3,4,5,6,7,8,9}; 

//定义一个二维指针  
int  (*p)[3] = a; 

//*p得到的是 *(p+0) -> a[0]  -> 地址来的  类型 int *
//**p得到的是 *(*（p+0）+0)  -> a[0][0]  ->变量 -》 1  


指针正确指向一个数组： 
a[0]  <=>  p[0]   <=>  *(p+0) 表示的是地址 

a[0][0]  <=> p[0][0] <=> *(*(p+0)+0)  表示的变量


------------------------------------------------------------------------------------------------
二维数组  int a[4][5] =	{ {1,2,3,4,5},
			{6,7,8,9,10},
			{11,12,13,14,15},
			{16,17,18,19,20} };



数组指针（也称行指针）全称：指向数组的指针

int (*p)[n]    ()优先级高，首先说明p是一个指针，指向一个整型的一维数组，这个一维数组的长度是n，也可以说是p的步长。也就是说执行p+1时，p要跨过n个整型数据的长度
int (*p)[5];    该语句是定义一个数组指针，指向含5个元素的一维数组。
 p=a;        将该二维数组的首地址赋给p，也就是a[0]或&a[0][0]的地址。
 p++;        //该语句执行过后，也就是p=p+1;p跨过行a[0][]指向了行a[1][]


指针数组全称：储存指针的数组

int *p[n]    []优先级高，先与p结合成为一个数组，再由int*说明这是一个整型指针数组，它有n个指针类型的数组元素。这里执行p+1时，则p指向下一个数组元素，
int *p[4];
    这样赋值是错误的：p=a；因为p是个不可知的表示，只存在p[0]、p[1]、p[2]...p[n-1],而且它们分别是指针变量可以用来存放变量地址。但可以这样 *p=a; 这里*p表示指针数组第一个元素的值，a的首地址的值。


-------------------------Linux系统的命令使用---------------------------------------------
linux 系统命令：  

man  -> Linux系统帮助手册   

man man -》 查看当前系统的所有帮助手册说明  



    1  可执行程序或 shell 命令
     
    2  系统调用(内核提供的函数)
      
    3  库调用(程序库中的函数)
--------------------------------------前三个章节的手册是默认标配的后面的需要自己安装----     
    4  特殊文件(通常位于 /dev)     
    5  文件格式和规范，如 /etc/passwd      
    6  游戏   
    7  杂项(包括宏包和规范，如 man(7)，groff(7))     
    8  系统管理命令(通常只针对 root 用户)   
    9  内核例程 [非标准
---------------------------------------------
例如：查看strcmp 函数的使用 
man 3  strcmp
man 1  ls 

-----------------------------------------------------------------------
关机命令：  
shutdown 
shutdown  -h now  马上关机   

重启命令：  
reboot    

clear  清屏    
-----------------------------------------------------------------------
用户常用命令：  
ls      查看当前目录下的文件名  
ls -a   查看当前目录下的文件名 (包括隐藏文件，在linux系统中隐藏文件以.开头)
ls -l   查看文件的详细属性    

cd      进入一个目录    
cd  ..  返回上一级目录  （.当前目录  cd ..上一级目录）
cd ~    快速进入家目录 
cd  -   返回上次进入的目录  

pwd     输出当前的路径名称 
echo    输出显示的数据       
例子：查看变量的名称 
echo  $PATH 

cat     读取一个文本中的数据  


mkdir   创建一个目录  
mkdir   -p  //创建多级目录
touch   创建一个普通文件  

cp       拷贝一个文件   cp  hello.c  hello2.c
cp  -R   拷贝一个目录   cp  dir   dir2   -R  

mv       移动或重命名一个目录或文件   
rm       删除一个文件或目录     
		                   -R 


alias  给命令起别名 
例如： alias  c='clear'

find  查找一个文件   
例子：  
find  /home/gec   -name   "test1"


which  查看工具的所在路径 

ifconfig 
查看当前的网络IP地址  
 
----------------------------------------------------------------------
压缩与解压命令:  


tar   压缩文件管理工具     


压缩与解压参数： 

x  解压  
c  压缩
z  使用z算法对文件进行压缩或解压 对应格式  .tar.bz  
j  使用j算法对文件进行压缩或解压 对应格式  .tar.bz2
v  压缩信息是否可视  
f  文件夹 file  

注意：假设文件的后缀不为.bz  .bz2 则不需要制定任何算法
------------------------------------------------------------
例子： 对一个文件进行压缩 
tar -czvf  test1.tar.bz  test1/ 

例子：对一个压缩包进行解压 
tar -xzvf  test1.tar.bz

练习： 使用j算法对文件进行压缩和解压
tar -cjvf test1.tar.bz2  test1/  
tar -xjvf test1.tar.bz2 
 
------------------------------------------------------------------------
linux系统的文件权限： 

chmod  修改文件的权限  

例子： 
chmod  [ugoa]+/-[rwx]  文件名

	  u:文件所有者 
	  g:文件所属组 
	  o: 其他用户
	  a:所有  
	  
例如：把所有人的可读权限去掉  
chmod  a-r  文件名 
------------------------------------推荐使用如下：
利用：421BCD码去修改文件的权限 
rwx rwx rwx  
421 421 421
例如：把所有人都加上可写可执行权限 
chmod 333  文件名
----------------------------------------------------------------------------------
修改文件的所有者与所属组：  

chown  所有者：所属组  文件名   

例子：把文件的所有者改为gec 所属组改为 root 
chown  gec:root  文件名

-----------------------------------------------------------------------------------
特别提示：假设使用命令的时候提示  不允许的操作  则需要超级管理员权限去执行该命令  

sudo  命令  。。。。。
-----------------------------------------------------------------------------------

linux系统的用户管理： 

1.添加新的用户   
sudo adduser  用户名 

2.切换用户  
sudo su  用户名 

3.删除用户  
sudo userdel 用户名 

4.修改用户密码 
sudo passwd 用户名

-----------------------------------------------------------------------
Linux系统进程管理命令：  相当于windos里面的任务管理器   

查看当前的进程pid号 
ps   
------------------------------------
显示如下： 
  PID TTY          TIME CMD
 3313 pts/4    00:00:00 bash


 PID  进程的ID号，每一个进程都有唯一的一个PID号  
 TTY  进程所占用的串口号   
 TIME 时间  
 CMD  进程的名称  
 --------------------------------------------
 
查看当前的进程： 
ps  
查看系统的所有进程： 
ps -e  
查看系统进程的详细信息： 
ps -f  
  
top  查看进程所占用的设备信息： 例如CPU  内存 的使用情况  

pstree  查看进程的家族关系  

------------------------------------------------------------

控制进程：   

杀死进程：  kill    进程号 
			killall 进程名    （杀死多个）

暂停进程：      killall  -STOP  进程名 
继续运行进程：  killall  -CONT  进程名 
----------------------------------------------------------
./进程名  &   ->后台运行


--------------------------------------------------------------------------------------------------------------------------------------
linux系统自带的编辑器  


gedit  可视化编辑工具：  

---------------------------------------------
vi     命令编辑工具： 

vi  文件名     编辑文件


命令模式： esc  

	dd   //删除一行 
	yy   //复制一行  
	pp   //粘贴一行 
	
	u   //undo  撤销  
	
	: 行号   （跳转到第几行）
	/字符串   （查找字符串）   n  向下查找  N 向上查找 



插入模式： i  o  a  

 












