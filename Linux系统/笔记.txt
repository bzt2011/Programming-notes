交叉开发的观念：根据不同的平台去选择对应的编译器对代码进行编译，编译完毕后，再把可执行代码
				放到对应的平台上去运行，这样的过程我们就叫作交叉开发。 
				
为需要交叉开发？？  
嵌入式产品的硬件资源是很宝贵的，所以我们没有必要直接
在对应的产品上进行开发，这样会造成资源的浪费。我们
都是在第三方平台对程序进行开发，开发完毕后，产品负责
运行功能代码。这样就可以减少资源的浪费。 

重点掌握不同平台的开发环境的搭建，是我们嵌入式入门的必备条件！！！！！！ 



---------------------------6818平台的开发环境的搭建步骤-----------------------
1.下载交叉开发工具链      （自己查阅芯片型号，在网上下载对应的工具链即可）
arm-2009q3.tar.bz2    (目前配套的)

2.把arm-2009q3.tar.bz2 工具链拷贝到家目录 
例子： 
cp arm-2009q3.tar.bz2  /home/gec/  
在家目录创建工具的文件夹 
mkdir  arm 

3.把工具链解压到arm 文件夹中  
tar -xjvf arm-2009q3.tar.bz2   -C arm/ 

4.测试工具链是否可以使用  
./arm/arm-2009q3/bin/arm-none-linux-gnueabi-gcc  hello.c  -o hello

温馨提示： 64位的操作系统同学需要安装 32位的库命令如下： 
		   sudo apt-get install lib32z1 lib32ncurses5

//练习：编写一个程序，在开发板中输出自己的英文名

------------------------------------------------------
中午查阅：1.什么是环境变量 ？？？  
			系统运行的一些参数。 

		  2.什么绝对路径 什么是相对路径  
		    绝对路径：相对于根目录的路径 
			相对路径：相对于当前目录的路径
		     
		  3.linux系统的目录结构 
				 “树状结构”

------------------------------------------------------
绝对路径：从  （/）根目录出发的路径都是绝对路径  
只要从根目录出发，那么不管用户在哪里一个目录中，系统都可以找到对应的文件。
例如： /home/gec/hello  //从根目录出发，下的home文件夹中的gec文件夹，里面的hello程序 


相对路径：从 （./ ） 用户的当前路径出发的是相对路径。  
相对路径的使用，必须要用户明白自己现在在哪个文件夹中，去哪里寻找需要执行的文件。  
例如： ./hello  在当前目录寻找hello 的程序 

-----------------------------------------------------
在linux系统中只有一个 文件系统 没有盘符的概念！！！！！

Linux文件系统的 ： “树形结构”



文件结构：  

/：根目录，所有目录的起源   **********

/bin： 存放用户的可执行文件   （以后用户安装的一些工具都放到该目录上）  *********
/dev： 驱动文件所存放的目录    （以后我们控制硬件设备都是访问该目录下的内容） ********
/etc： linux系统配置文件的所存放的目录   （对于一些工具与服务器的配置都在该目录下进行）  *********
/home：用户的家目录所放的位置              (用户只有在自己的家目录中才拥有最高权限)    ********
/lib： 系统库文件所存放的目录               （要使用第三方库进行开发，都要把新的库文件配置到该目录下）  *******
/mnt： 挂载目录   （共享文件夹所在的目录）
重点掌握：
--------------------------------------------------------------------------------------------------------------------
了解即可：
/boot：Linux的内核及引导系统程序所需要的文件目录。
/cdrom：光驱目录。  
/lost+found：在ext2或ext3文件系统中，当系统意外崩溃或机器意外关机，而产生一些文件碎片放在这里。
/media：有些linux的发行版使用这个目录来挂载那些usb接口的移动硬盘（包括U盘）、CD/DVD驱动器等等。
/opt：这里主要存放那些可选的程序。
/proc：可以在这个目录下获取系统信息。这些信息是在内存中，由系统自己产生的。
/root：Linux超级权限用户root的家目录。
/sbin：这个目录是用来存放系统管理员的系统管理程序。local/sbin目录是相似的，凡是目录sbin中包含的都是root权限才能执行的。
/selinux ：对SElinux的一些配置文件目录，SElinux可以让linux更加安全。
/srv 服务启动后，所需访问的数据目录，举个例子来说，www服务启动读取的网页数据就可以放在/srv/www中
/tmp：临时文件目录，用来存放不同程序执行时产生的临时文件。有时用户运行程序的时候，会产生临时文件。/tmp就用来存放临时文件的。/var/tmp目录和这个目录相似。
/usr：这是linux系统中占用硬盘空间最大的目录。
/usr/local：这里主要存放那些手动安装的软件，
/usr/share ：系统共用的东西存放地，比如 /usr/share/fonts 是字体目录，/usr/share/doc和/usr/share/man帮助文件。
/var：这个目录的内容是经常变动的，Apache服务器站点存放目录；/var/lib 用来存放一些库文件，比如MySQL的，以及MySQL数据库的的存放地。
-------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------
-------------------------------------------重点与难点--------------------------------------------------------------
环境变量：系统运行的一些参数，告诉操作系统某些变量的含义！！！



查看当前系统的所有环境变量的值：  
export  或  env  

如下：  

GDM_LANG="zh_CN"  //告诉操作系统当前系统编码 文中文格式 
HOME="/home/gec"  //告诉操作系统家目录的路径 
LANG="zh_CN.UTF-8" //使用的子集编码 为 UTF-8  
PATH="/usr/local/sbin: .....     重点！！！！！！ 告诉操作系统 工具放在那里！！ 
USER="gec"  
 
  


重点用户的工具环境变量：  PATH   

//输出当前工具的环境变量值  
echo  $PATH  


------------------------------------------------------------------------------------------------------------------------
PATH   环境变量的配置：     




1.临时配置  
直接在终端输入：  
export  PATH=“路径”

练习：把交叉开发工具链的路径配置到 临时的环境变量中看看是否可以使用。 
配置临时的交叉工具链的环境变量：  
$PATH->取出原来环境变量的值 
export  PATH=$PATH:/home/gec/arm/arm-2009q3/bin/


2.永久的环境变量配置   （用户级的 只在当前用户生效）
cd  ~    //进入家目录  
gedit .bashrc   //打开配置文件  

在文件末尾添加工具环境变量的新路径！！！  
例如： 
export  PATH=$PATH:/home/gec/arm/arm-2009q3/bin/
（关闭终端就生效）


3.永久的环境变量配置   （系统级的  在整个linux系统中的所有用户都生效）
sudo gedit /etc/profile   //打开系统的配置文件   
在文件末尾添加工具环境变量的新路径！！！  
例如： 
export  PATH=$PATH:/home/gec/arm/arm-2009q3/bin/
 
(重启电脑才生效)


任务：把自己的工具链配置到环境变量中！！！！ 

------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
linux 系统的硬链接与软连接：    
软连接做用一个快捷方式：   当源文件被删除时，链接文件无法使用   
ln  -s   源文件  连接文件名 


硬链接：做一个应用的别名   ： 当源文件被删除时，链接文件没有任何影响  
ln   源文件  连接文件名  

-----------------------------------------------------------------------------------------------------------------------
例子： 
ln -s arm-none-linux-gnueabi-gcc  arm-linux-gcc 
ln -s arm-none-linux-gnueabi-gcc  arm-gcc

c语言类型（32位系统）
{
    char      8位
    short     16位
    int       32位
    long      32位
    long long 64位

    float  浮点  32位
    double 浮点  64位
}

转换说明及其打印输出结果
{
    %f   浮点数，十进制计数法
    %.3f 指定3个小数点的小数



}

常用的指针类型： 
void *p;              //万能指针，用来暂时保存地址，待用户知道数据的类型以后再转换成对应的数据 
char *p;              //字符指针  指向一个字符串  或 指向一个字符的地址
int  *p;              //整形指针，指向一个整形数组 或 指向一个整形的地址 
char **p;             //二级指针， 用来保存指针的地址的。 
int  *a[10];          //数组指针（因为[]符号的优先级比较高）     该数组中存放了10个 int *的指针
int  (*a)[10];        //指针数组（因为（）符号的优先级比较高） 该指针指向一个 int  [10]的数据类型 
int  *a(int argv)     //函数  该函数的返回类型为 int *的地址  参数为 int 
int  *(*a)(int argv)  //指针  指向返回类型为 int *的地址  参数为 int 的函数

----------------------------------------------------------------------------------------------------
二级指针：存指针的地址

int a=10;  

//p一级指针 
int *p = &a;  
			
//保存p的地址 
int **q = &p;  

*q  -> 取到的是 a的地址   &a 
**q -> 取到的是 a的值   10
-----------------------------------------------------------------------------------------------------
二维指针： 指向一个二维数组的指针  （数组指针）

int a[3][3]={1,2,3,4,5,6,7,8,9}; 

//定义一个二维指针  
int  (*p)[3] = a; 

//*p得到的是 *(p+0) -> a[0]  -> 地址来的  类型 int *
//**p得到的是 *(*（p+0）+0)  -> a[0][0]  ->变量 -》 1  


指针正确指向一个数组： 
a[0]  <=>  p[0]   <=>  *(p+0) 表示的是地址 

a[0][0]  <=> p[0][0] <=> *(*(p+0)+0)  表示的变量


------------------------------------------------------------------------------------------------
二维数组  int a[4][5] =	{ {1,2,3,4,5},
			{6,7,8,9,10},
			{11,12,13,14,15},
			{16,17,18,19,20} };



数组指针（也称行指针）全称：指向数组的指针

int (*p)[n]    ()优先级高，首先说明p是一个指针，指向一个整型的一维数组，这个一维数组的长度是n，也可以说是p的步长。也就是说执行p+1时，p要跨过n个整型数据的长度
int (*p)[5];    该语句是定义一个数组指针，指向含5个元素的一维数组。
 p=a;        将该二维数组的首地址赋给p，也就是a[0]或&a[0][0]的地址。
 p++;        //该语句执行过后，也就是p=p+1;p跨过行a[0][]指向了行a[1][]


指针数组全称：储存指针的数组

int *p[n]    []优先级高，先与p结合成为一个数组，再由int*说明这是一个整型指针数组，它有n个指针类型的数组元素。这里执行p+1时，则p指向下一个数组元素，
int *p[4];
    这样赋值是错误的：p=a；因为p是个不可知的表示，只存在p[0]、p[1]、p[2]...p[n-1],而且它们分别是指针变量可以用来存放变量地址。但可以这样 *p=a; 这里*p表示指针数组第一个元素的值，a的首地址的值。


-------------------------Linux系统的命令使用---------------------------------------------
linux 系统命令：  

man  -> Linux系统帮助手册   

man man -》 查看当前系统的所有帮助手册说明  



    1  可执行程序或 shell 命令
     
    2  系统调用(内核提供的函数)
      
    3  库调用(程序库中的函数)
--------------------------------------前三个章节的手册是默认标配的后面的需要自己安装----     
    4  特殊文件(通常位于 /dev)     
    5  文件格式和规范，如 /etc/passwd      
    6  游戏   
    7  杂项(包括宏包和规范，如 man(7)，groff(7))     
    8  系统管理命令(通常只针对 root 用户)   
    9  内核例程 [非标准
---------------------------------------------
例如：查看strcmp 函数的使用 
man 3  strcmp
man 1  ls 

-----------------------------------------------------------------------
关机命令：  
shutdown 
shutdown  -h now  马上关机   

重启命令：  
reboot    

clear  清屏    
-----------------------------------------------------------------------
用户常用命令：  
ls      查看当前目录下的文件名  
ls -a   查看当前目录下的文件名 (包括隐藏文件，在linux系统中隐藏文件以.开头)
ls -l   查看文件的详细属性    

cd      进入一个目录    
cd  ..  返回上一级目录  （.当前目录  cd ..上一级目录）
cd ~    快速进入家目录 
cd  -   返回上次进入的目录  

pwd     输出当前的路径名称 
echo    输出显示的数据       
例子：查看变量的名称 
echo  $PATH 

cat     读取一个文本中的数据  


mkdir   创建一个目录  
mkdir   -p  //创建多级目录
touch   创建一个普通文件  

cp       拷贝一个文件   cp  hello.c  hello2.c
cp  -R   拷贝一个目录   cp  dir   dir2   -R  

mv       移动或重命名一个目录或文件   
rm       删除一个文件或目录     
		                   -R 


alias  给命令起别名 
例如： alias  c='clear'

find  查找一个文件   
例子：  
find  /home/gec   -name   "test1"


which  查看工具的所在路径 

ifconfig 
查看当前的网络IP地址  
 
----------------------------------------------------------------------
压缩与解压命令:  


tar   压缩文件管理工具     


压缩与解压参数： 

x  解压  
c  压缩
z  使用z算法对文件进行压缩或解压 对应格式  .tar.bz  
j  使用j算法对文件进行压缩或解压 对应格式  .tar.bz2
v  压缩信息是否可视  
f  文件夹 file  

注意：假设文件的后缀不为.bz  .bz2 则不需要制定任何算法
------------------------------------------------------------
例子： 对一个文件进行压缩 
tar -czvf  test1.tar.bz  test1/ 

例子：对一个压缩包进行解压 
tar -xzvf  test1.tar.bz

练习： 使用j算法对文件进行压缩和解压
tar -cjvf test1.tar.bz2  test1/  
tar -xjvf test1.tar.bz2 
 
------------------------------------------------------------------------
linux系统的文件权限： 

chmod  修改文件的权限  

例子： 
chmod  [ugoa]+/-[rwx]  文件名

	  u:文件所有者 
	  g:文件所属组 
	  o: 其他用户
	  a:所有  
	  
例如：把所有人的可读权限去掉  
chmod  a-r  文件名 
------------------------------------推荐使用如下：
利用：421BCD码去修改文件的权限 
rwx rwx rwx  
421 421 421
例如：把所有人都加上可写可执行权限 
chmod 333  文件名
----------------------------------------------------------------------------------
修改文件的所有者与所属组：  

chown  所有者：所属组  文件名   

例子：把文件的所有者改为gec 所属组改为 root 
chown  gec:root  文件名

-----------------------------------------------------------------------------------
特别提示：假设使用命令的时候提示  不允许的操作  则需要超级管理员权限去执行该命令  

sudo  命令  。。。。。
-----------------------------------------------------------------------------------

linux系统的用户管理： 

1.添加新的用户   
sudo adduser  用户名 

2.切换用户  
sudo su  用户名 

3.删除用户  
sudo userdel 用户名 

4.修改用户密码 
sudo passwd 用户名

-----------------------------------------------------------------------
Linux系统进程管理命令：  相当于windos里面的任务管理器   

查看当前的进程pid号 
ps   
------------------------------------
显示如下： 
  PID TTY          TIME CMD
 3313 pts/4    00:00:00 bash


 PID  进程的ID号，每一个进程都有唯一的一个PID号  
 TTY  进程所占用的串口号   
 TIME 时间  
 CMD  进程的名称  
 --------------------------------------------
 
查看当前的进程： 
ps  
查看系统的所有进程： 
ps -e  
查看系统进程的详细信息： 
ps -f  
  
top  查看进程所占用的设备信息： 例如CPU  内存 的使用情况  

pstree  查看进程的家族关系  

------------------------------------------------------------

控制进程：   

杀死进程：  kill    进程号 
			killall 进程名    （杀死多个）

暂停进程：      killall  -STOP  进程名 
继续运行进程：  killall  -CONT  进程名 
----------------------------------------------------------
./进程名  &   ->后台运行


--------------------------------------------------------------------------------------------------------------------------------------
linux系统自带的编辑器  


gedit  可视化编辑工具：  

---------------------------------------------
vi     命令编辑工具： 

vi  文件名     编辑文件


命令模式： esc  

	dd   //删除一行 
	yy   //复制一行  
	pp   //粘贴一行 
	
	u   //undo  撤销  
	
	: 行号   （跳转到第几行）
	/字符串   （查找字符串）   n  向下查找  N 向上查找 



插入模式： i  o  a  

 
c语言类型（32位系统）
{
    char      8位
    short     16位
    int       32位
    long      32位
    long long 64位

    float  浮点  32位
    double 浮点  64位
}

转换说明及其打印输出结果
{
    %f   浮点数，十进制计数法
    %.3f 指定3个小数点的小数



}

常用的指针类型： 
void *p;              //万能指针，用来暂时保存地址，待用户知道数据的类型以后再转换成对应的数据 
char *p;              //字符指针  指向一个字符串  或 指向一个字符的地址
int  *p;              //整形指针，指向一个整形数组 或 指向一个整形的地址 
char **p;             //二级指针， 用来保存指针的地址的。 
int  *a[10];          //数组指针（因为[]符号的优先级比较高）     该数组中存放了10个 int *的指针
int  (*a)[10];        //指针数组（因为（）符号的优先级比较高） 该指针指向一个 int  [10]的数据类型 
int  *a(int argv)     //函数  该函数的返回类型为 int *的地址  参数为 int 
int  *(*a)(int argv)  //指针  指向返回类型为 int *的地址  参数为 int 的函数

----------------------------------------------------------------------------------------------------
二级指针：存指针的地址

int a=10;  

//p一级指针 
int *p = &a;  
			
//保存p的地址 
int **q = &p;  

*q  -> 取到的是 a的地址   &a 
**q -> 取到的是 a的值   10
-----------------------------------------------------------------------------------------------------
二维指针： 指向一个二维数组的指针  （数组指针）

int a[3][3]={1,2,3,4,5,6,7,8,9}; 

//定义一个二维指针  
int  (*p)[3] = a; 

//*p得到的是 *(p+0) -> a[0]  -> 地址来的  类型 int *
//**p得到的是 *(*（p+0）+0)  -> a[0][0]  ->变量 -》 1  


指针正确指向一个数组： 
a[0]  <=>  p[0]   <=>  *(p+0) 表示的是地址 

a[0][0]  <=> p[0][0] <=> *(*(p+0)+0)  表示的变量


------------------------------------------------------------------------------------------------
二维数组  int a[4][5] =	{ {1,2,3,4,5},
			{6,7,8,9,10},
			{11,12,13,14,15},
			{16,17,18,19,20} };



数组指针（也称行指针）全称：指向数组的指针

int (*p)[n]    ()优先级高，首先说明p是一个指针，指向一个整型的一维数组，这个一维数组的长度是n，也可以说是p的步长。也就是说执行p+1时，p要跨过n个整型数据的长度
int (*p)[5];    该语句是定义一个数组指针，指向含5个元素的一维数组。
 p=a;        将该二维数组的首地址赋给p，也就是a[0]或&a[0][0]的地址。
 p++;        //该语句执行过后，也就是p=p+1;p跨过行a[0][]指向了行a[1][]


指针数组全称：储存指针的数组

int *p[n]    []优先级高，先与p结合成为一个数组，再由int*说明这是一个整型指针数组，它有n个指针类型的数组元素。这里执行p+1时，则p指向下一个数组元素，
int *p[4];
    这样赋值是错误的：p=a；因为p是个不可知的表示，只存在p[0]、p[1]、p[2]...p[n-1],而且它们分别是指针变量可以用来存放变量地址。但可以这样 *p=a; 这里*p表示指针数组第一个元素的值，a的首地址的值。


-------------------------Linux系统的命令使用---------------------------------------------
linux 系统命令：  

man  -> Linux系统帮助手册   

man man -》 查看当前系统的所有帮助手册说明  



    1  可执行程序或 shell 命令
     
    2  系统调用(内核提供的函数)
      
    3  库调用(程序库中的函数)
--------------------------------------前三个章节的手册是默认标配的后面的需要自己安装----     
    4  特殊文件(通常位于 /dev)     
    5  文件格式和规范，如 /etc/passwd      
    6  游戏   
    7  杂项(包括宏包和规范，如 man(7)，groff(7))     
    8  系统管理命令(通常只针对 root 用户)   
    9  内核例程 [非标准
---------------------------------------------
例如：查看strcmp 函数的使用 
man 3  strcmp
man 1  ls 

-----------------------------------------------------------------------
关机命令：  
shutdown 
shutdown  -h now  马上关机   

重启命令：  
reboot    

clear  清屏    
-----------------------------------------------------------------------
用户常用命令：  
ls      查看当前目录下的文件名  
ls -a   查看当前目录下的文件名 (包括隐藏文件，在linux系统中隐藏文件以.开头)
ls -l   查看文件的详细属性    

cd      进入一个目录    
cd  ..  返回上一级目录  （.当前目录  cd ..上一级目录）
cd ~    快速进入家目录 
cd  -   返回上次进入的目录  

pwd     输出当前的路径名称 
echo    输出显示的数据       
例子：查看变量的名称 
echo  $PATH 

cat     读取一个文本中的数据  


mkdir   创建一个目录  
mkdir   -p  //创建多级目录
touch   创建一个普通文件  

cp       拷贝一个文件   cp  hello.c  hello2.c
cp  -R   拷贝一个目录   cp  dir   dir2   -R  

mv       移动或重命名一个目录或文件   
rm       删除一个文件或目录     
		                   -R 


alias  给命令起别名 
例如： alias  c='clear'

find  查找一个文件   
例子：  
find  /home/gec   -name   "test1"


which  查看工具的所在路径 

ifconfig 
查看当前的网络IP地址  
 
----------------------------------------------------------------------
压缩与解压命令:  


tar   压缩文件管理工具     


压缩与解压参数： 

x  解压  
c  压缩
z  使用z算法对文件进行压缩或解压 对应格式  .tar.bz  
j  使用j算法对文件进行压缩或解压 对应格式  .tar.bz2
v  压缩信息是否可视  
f  文件夹 file  

注意：假设文件的后缀不为.bz  .bz2 则不需要制定任何算法
------------------------------------------------------------
例子： 对一个文件进行压缩 
tar -czvf  test1.tar.bz  test1/ 

例子：对一个压缩包进行解压 
tar -xzvf  test1.tar.bz

练习： 使用j算法对文件进行压缩和解压
tar -cjvf test1.tar.bz2  test1/  
tar -xjvf test1.tar.bz2 
 
------------------------------------------------------------------------
linux系统的文件权限： 

chmod  修改文件的权限  

例子： 
chmod  [ugoa]+/-[rwx]  文件名

	  u:文件所有者 
	  g:文件所属组 
	  o: 其他用户
	  a:所有  
	  
例如：把所有人的可读权限去掉  
chmod  a-r  文件名 
------------------------------------推荐使用如下：
利用：421BCD码去修改文件的权限 
rwx rwx rwx  
421 421 421
例如：把所有人都加上可写可执行权限 
chmod 333  文件名
----------------------------------------------------------------------------------
修改文件的所有者与所属组：  

chown  所有者：所属组  文件名   

例子：把文件的所有者改为gec 所属组改为 root 
chown  gec:root  文件名

-----------------------------------------------------------------------------------
特别提示：假设使用命令的时候提示  不允许的操作  则需要超级管理员权限去执行该命令  

sudo  命令  。。。。。
-----------------------------------------------------------------------------------

linux系统的用户管理： 

1.添加新的用户   
sudo adduser  用户名 

2.切换用户  
sudo su  用户名 

3.删除用户  
sudo userdel 用户名 

4.修改用户密码 
sudo passwd 用户名

-----------------------------------------------------------------------
Linux系统进程管理命令：  相当于windos里面的任务管理器   

查看当前的进程pid号 
ps   
------------------------------------
显示如下： 
  PID TTY          TIME CMD
 3313 pts/4    00:00:00 bash


 PID  进程的ID号，每一个进程都有唯一的一个PID号  
 TTY  进程所占用的串口号   
 TIME 时间  
 CMD  进程的名称  
 --------------------------------------------
 
查看当前的进程： 
ps  
查看系统的所有进程： 
ps -e  
查看系统进程的详细信息： 
ps -f  
  
top  查看进程所占用的设备信息： 例如CPU  内存 的使用情况  

pstree  查看进程的家族关系  

------------------------------------------------------------

控制进程：   

杀死进程：  kill    进程号 
			killall 进程名    （杀死多个）

暂停进程：      killall  -STOP  进程名 
继续运行进程：  killall  -CONT  进程名 
----------------------------------------------------------
./进程名  &   ->后台运行


--------------------------------------------------------------------------------------------------------------------------------------
linux系统自带的编辑器  


gedit  可视化编辑工具：  

---------------------------------------------
vi     命令编辑工具： 

vi  文件名     编辑文件


命令模式： esc  

	dd   //删除一行 
	yy   //复制一行  
	pp   //粘贴一行 
	
	u   //undo  撤销  
	
	: 行号   （跳转到第几行）
	/字符串   （查找字符串）   n  向下查找  N 向上查找 



插入模式： i  o  a  

 































